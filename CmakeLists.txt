cmake_minimum_required(VERSION 3.20)
project(iNkox2
    VERSION 1.0.0
    DESCRIPTION "Nikopolis C++ library"
    LANGUAGES CXX
)

# add import export defiinitions
# Define TPSTATIC as both a CMake variable and preprocessor macro
set(TPSTATIC ON CACHE BOOL "Build tptools as a static library")
if(TPSTATIC)
    add_definitions(-DTPSTATIC)
endif()
add_definitions(-DTPNIKOPOLIS_EXPORTS)
add_definitions(-D_HAS_TR1_NAMESPACE)

# Set C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

message(STATUS "Using vcpkg toolchain file: ${CMAKE_TOOLCHAIN_FILE}")
message(STATUS "C Compiler: ${CMAKE_C_COMPILER}")
message(STATUS "C++ Compiler: ${CMAKE_CXX_COMPILER}")
message(STATUS "C Compiler ID: ${CMAKE_C_COMPILER_ID}")
message(STATUS "C++ Compiler ID: ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "MSVC: ${MSVC}")
message(STATUS "Generator: ${CMAKE_GENERATOR}")
message(STATUS "Host System: ${CMAKE_HOST_SYSTEM_NAME}")


if(MSVC)
    message(STATUS "Configuring for MSVC")
	add_compile_options(/std:c++${CMAKE_CXX_STANDARD})
	#add_compile_options(/Zx:preprocesor})
	add_compile_options(/utf-8)
endif()

# Add required packages
find_package(fmt CONFIG REQUIRED)  
#find_package(boost CONFIG REQUIRED)  

# # Include project settings
 #include(cmake/StandardProjectSettings.cmake)
 include (${CMAKE_SOURCE_DIR}/cmake/common.cmake)
 include(cmake/CompilerWarnings.cmake)
# include(cmake/Sanitizers.cmake)

# # Options
# option(MY_PROJECT_BUILD_TESTS "Build tests" ON)
# option(MY_PROJECT_BUILD_EXAMPLES "Build examples" ON)
# option(MY_PROJECT_BUILD_BENCHMARKS "Build benchmarks" OFF)

# # Add subdirectories
# add_subdirectory(external)
add_subdirectory(src)

# if(MY_PROJECT_BUILD_TESTS)
    # enable_testing()
    # add_subdirectory(tests)
# endif()

# if(MY_PROJECT_BUILD_EXAMPLES)
    # add_subdirectory(examples)
# endif()

# if(MY_PROJECT_BUILD_BENCHMARKS)
    # add_subdirectory(benchmarks)
# endif()