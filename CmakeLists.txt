cmake_minimum_required(VERSION 3.20)
project(Nikox2
    VERSION 1.0.0
    DESCRIPTION "Nikopolis C++ library"
    LANGUAGES CXX
)

# add import export defiinitions
# Define TPSTATIC as both a CMake variable and preprocessor macro
set(TPSTATIC ON CACHE BOOL "Build tptools as a static library")
set(NIKO_PYTHON_ENV "niko13")

if(TPSTATIC)
    add_definitions(-DTPSTATIC)
endif()
add_definitions(-DTPNIKOPOLIS_EXPORTS)
add_definitions(-D_HAS_TR1_NAMESPACE)
add_definitions(-DTPSTATIC)



# Set output directories for all targets
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_PROCESSOR}/${CMAKE_BUILD_TYPE}") 
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")

# Optional: Ensure the settings apply for all configurations (Debug, Release, etc.)
foreach (CONFIG ${CMAKE_CONFIGURATION_TYPES})
    string (TOUPPER ${CONFIG} CONFIG_UPPER)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONFIG_UPPER} "${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_PROCESSOR}/${CONFIG}") 
    set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONFIG_UPPER} "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONFIG_UPPER}}") 
    set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CONFIG_UPPER} "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONFIG_UPPER}}") 
endforeach()


# Set C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

message(STATUS "Using vcpkg toolchain file: ${CMAKE_TOOLCHAIN_FILE}")
message(STATUS "C Compiler: ${CMAKE_C_COMPILER}")
message(STATUS "C++ Compiler: ${CMAKE_CXX_COMPILER}")
message(STATUS "C Compiler ID: ${CMAKE_C_COMPILER_ID}")
message(STATUS "C++ Compiler ID: ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "MSVC: ${MSVC}")
message(STATUS "Generator: ${CMAKE_GENERATOR}")
message(STATUS "Host System: ${CMAKE_HOST_SYSTEM_NAME}")
message (STATUS "Python Include Directories: ${Python_INCLUDE_DIRS}")


if(MSVC)
    message(STATUS "Configuring for MSVC")
    set (USER_DIR "$ENV{USERPROFILE}")
	add_compile_options(/std:c++${CMAKE_CXX_STANDARD})
	#add_compile_options(/Zx:preprocesor})
	add_compile_options(/utf-8)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4828 /wd4858")
else()
    set(USER_DIR "$ENV{HOME}")
endif()

# Add required packages
#find_package(Boost REQUIRED COMPONENTS core system)
find_package(Eigen3 CONFIG REQUIRED)  
find_package(fmt CONFIG REQUIRED)  
#find_package(boost CONFIG REQUIRED)  

# # Include project settings
 #include(cmake/StandardProjectSettings.cmake)
 include (${CMAKE_SOURCE_DIR}/cmake/common.cmake)
 include(cmake/CompilerWarnings.cmake)
# include(cmake/Sanitizers.cmake)

# # Options
# option(MY_PROJECT_BUILD_TESTS "Build tests" ON)
# option(MY_PROJECT_BUILD_EXAMPLES "Build examples" ON)
# option(MY_PROJECT_BUILD_BENCHMARKS "Build benchmarks" OFF)

#find_package (Python3 COMPONENTS Interpreter Development REQUIRED)
#set (PYTHON_EXECUTABLE "C:/miniconda3/envs/${NIKO_PYTHON_ENV}/python.exe") 
#set(Python3_ROOT_DIR "C:/miniconda3/envs/${NIKO_PYTHON_ENV}") 
#set(Python3_EXECUTABLE "C:/miniconda3/envs/${NIKO_PYTHON_ENV}/python.exe")

#message (STATUS "Python3_EXECUTABLE = ${Python3_EXECUTABLE}") 
#message(STATUS "Python3_INCLUDE_DIRS = ${Python3_INCLUDE_DIRS}") 
#message(STATUS "Python3_LIBRARIES = ${Python3_LIBRARIES}") 
#find_package (Python3 COMPONENTS Interpreter Development REQUIRED)

add_subdirectory(external/pybind11)
# # Add subdirectories
# add_subdirectory(external)
add_subdirectory(src)
add_subdirectory(interface)

enable_testing()
add_subdirectory("${CMAKE_SOURCE_DIR}/tests/cpp" "${CMAKE_BINARY_DIR}/tests")

# if(MY_PROJECT_BUILD_TESTS)
    # enable_testing()
    # add_subdirectory(tests)
# endif()

# if(MY_PROJECT_BUILD_EXAMPLES)
    # add_subdirectory(examples)
# endif()

# if(MY_PROJECT_BUILD_BENCHMARKS)
    # add_subdirectory(benchmarks)
# endif()

